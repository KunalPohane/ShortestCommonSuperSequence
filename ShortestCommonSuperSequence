//{ Driver Code Starts
import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	public static void main (String[] args) {

		Scanner sc=new Scanner(System.in);
		int test=sc.nextInt();
		while(test-- > 0){
		    int p=sc.nextInt();             // Take size of both the strings as input
		    int q=sc.nextInt();
		    
		    String s1=sc.next();            // Take both the string as input
	        String s2=sc.next();
		    
		    Solution obj = new Solution();
		    
		    System.out.println(obj.lcs(p, q, s1, s2));
		}
	}
}
// } Driver Code Ends


class Solution
{
    //Function to find the length of longest common subsequence in two strings.
    static int lcs(int x, int y, String s1, String s2)
    {
        // your code here
        
        int dp[][] = new int[x+1][y+1];
   
      return lcs (x , y ,s1 , s2 , dp);
        
    }
    
    
    public static int lcs(int x, int y, String s1, String s2 , int [][]dp){
        
    
        
          for(int m = 0  ; m < x+1 ; m++){
            
          for(int n = 0  ; n < y+1 ; n++){
               
             
              
               
        if(m == 0 || n == 0){
            
              dp[m][n] = 0;
            
        }
        
        
        
        else if(s1.charAt(m-1) == s2.charAt(n-1)){
            
              dp[m][n] = 1 + dp[m -1][n - 1] ;
        }
        
        
        else{
            
           dp[m][n] = Math.max(dp[m -1][n] , dp[m][n - 1]);
        
            
        }
        
             
          }
            
        }
        
        
        return dp[x][y];
        
        
        
    }
    
}
